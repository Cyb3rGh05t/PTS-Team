#!/bin/bash
#
# Title:      PTS remove old garbage
# YML Author: MrDoob for PTS
# GNU:        General Public License v3.0
################################################################################
---
- name: Remove Cloudplow | remove old cronjob
  cron:
      name: 'Cloudplow Clean'
      user: 'root'
      state: absent

- name: Remove Cloudplow | directory
  file:
      state: absent
      path: '/opt/appdata/cloudplow'

- name: Remove Cloudplow | unused cronjob
  cron:
      state: absent
      name: 'Cloudplow Clean'
      user: 'root'
      minute: '0'
      hour: '0'
      job: 'cd /opt/appdata/cloudplow && /usr/bin/python3 cloudplow.py clean'

- name: Remove pgfork | not needed | never worked
  file:
      state: absent
      path: '/bin/pgfork'

- name: Remove snapd 
  shell: 'apt-get purge snap -yqq 1>/dev/null 2>&1'
  ignore_errors: yes

- name: Remove old Clone Clean Cron Job
  cron:
    name: Hourly Clean Clone Clean
    state: absent
  ignore_errors: yes

- name: Remove old Downloads Cleaner Cron Job
  cron:
    name: Hourly downloads cleaner
    state: absent
  ignore_errors: yes
  
- name: Get running processes list from remote host
  ignore_errors: yes
  shell: "ps -few | grep cloneclean | awk '{print $2}'"
  register: running_processes
  
- name: Kill running processes
  ignore_errors: yes
  shell: "kill {{ item }}"
  with_items: "{{ running_processes.stdout_lines }}"
  
- wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ running_processes.stdout_lines }}"
  ignore_errors: yes
  register: cloneclean_processes
 
- name: Force kill stuck processes
  ignore_errors: yes
  shell: "kill -9 {{ item }}"
  with_items: "{{ cloneclean_processes.results | select('failed') | map(attribute='item') | list }}"
  
- service:
    name: cloneclean
    state: restarted

