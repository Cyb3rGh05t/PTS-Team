#!/bin/bash
#
# Title:      Docker Install
###############################################################
---
- name: 'Establish Facts'
  set_fact:
    switch: 'on'
    updatecheck: 'default'

- name: 'Docker Check'
  stat:
    path: '/usr/bin/docker'
  register: check

- name: 'Docker Version Check - True'
  shell: "docker --version | awk '{print $3}'"
  register: updatecheck

- name: 'Switch - On'
  set_fact:
    switch: 'off'
  when: updatecheck.stdout == "18.09.8,"

- name: 'Stop All Containers'
  shell: 'docker stop $(docker ps -a -q)'
  ignore_errors: yes
  when:
    - check.stat.exists == True
    - switch == "on"

#- include: "./roles/docker/vars/{{ansible_os_family}}.yml"

##Debian
- name: Update APT package cache
  apt: update_cache=yes cache_valid_time=600

- name: Upgrade APT to the latest packages
  apt: upgrade=dist
  register: apt_result

- name: Autoremove unused packages
  command: apt-get -y autoremove
  register: apt_result
  changed_when: "'packages will be REMOVED' in apt_result.stdout"

- name: Purge residual kernel packages
  shell: apt-get remove -y --purge $(dpkg -l | grep "^rc\s*linux-image-" | awk '{print $2}' | tr '\n' ' ')
  register: apt_result
  changed_when: "'packages will be REMOVED' in apt_result.stdout"

- name: Install packages for apt add repository over HTTPS for {{ ansible_distribution }}
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packagesdep:
    - git
    - apt-transport-https
    - ca-certificates
    - wget
    - software-properties-common
    - gnupg2
    - curl
  when: ansible_os_family == 'Debian'
##Ubuntu
- name: Install packages for apt add repository over HTTPS  for {{ ansible_distribution }}
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - software-properties-common
    - apt-transport-https
    - ca-certificates
    - curl 
    - gnupg-agent
    - software-properties-common
  when: ansible_os_family == 'Ubuntu'

- name: Add Apt signing key from official docker repo
  apt_key:
    url: https://download.docker.com/linux/ {{ ansible_distribution|lower }}/gpg
    state: present

- name: add docker official repository for {{ ansible_distribution|lower }} - {{ ansible_distribution_release }}
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ {{ ansible_distribution|lower }} {{ ansible_distribution_release }} stable
    state: present

- name: Update APT package cache
  apt: update_cache=yes cache_valid_time=600

- name: Upgrade APT to the latest packages
  apt: upgrade=dist

- name: actually install docker
  apt:
    name: "docker-ce"
    state: latest

- name: Uninstall docker-py pip module
  pip:
    name: docker-py
    state: absent
  ignore_errors: yes
  when: switch == "on"

- name: Install docker pip module
  pip:
    name: docker
    state: latest
  ignore_errors: yes
  when: switch == "on"

- name: Check docker daemon.json exists
  stat:
    path: /etc/docker/daemon.json
  register: docker_daemon

- name: Stop docker to enable overlay2
  systemd:
    state: stopped
    name: docker
    enabled: yes
  when:
    - docker_daemon.stat.exists == False
    - switch == "on"

- name: Import daemon.json
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
    force: yes
    mode: 0775
  when:
    - docker_daemon.stat.exists == False
    - switch == "on"

- name: Start docker (Please Wait)
  systemd:
    state: started
    name: docker
    enabled: yes
  when:
    - docker_daemon.stat.exists == False
    - switch == "on"

- name: 'Wait for 20 seconds before commencing'
  wait_for:
    timeout: 20
  when: switch == "on"

- name: Check override folder exists
  stat:
    path: /etc/systemd/system/docker.service.d
  register: docker_override

- name: Create override folder
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: 0775
  when:
    - docker_override.stat.exists == False
    - switch == "on"
  tags: docker_standard

- name: Import override file
  copy:
    src: override.conf
    dest: /etc/systemd/system/docker.service.d/override.conf
    force: yes
    mode: 0775
  tags: docker_standard
  when: switch == "on"

- name: create plexguide network
  docker_network:
    name: 'plexguide'
    state: present
  tags: docker_standard
  when: switch == "on"

- name: 'Start All Containers'
  shell: 'docker start $(docker ps -a -q)'
  ignore_errors: yes
  when:
    - switch == "on"
    - check.stat.exists == True
