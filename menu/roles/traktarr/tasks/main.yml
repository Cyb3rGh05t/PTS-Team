#########################################################################
# Title:         Cloudbox: Traktarr Role                                #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check if traktarr service exists
  stat:
    path: "/etc/systemd/system/traktarr.service"
  register: traktarr_service

- name: Stop existing traktarr service
  systemd: state=stopped name=traktarr
  when: traktarr_service.stat.exists

- name: Create traktarr directories
  file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000 recurse=yes'
  with_items:
    - /opt/appdata/traktarr

- name: Clone traktarr
  git:
    repo: https://github.com/l3uddz/traktarr.git
    dest: /opt/appdata/traktarr
    version: HEAD
    force: yes
  become: yes
  become_user: '1000'

- name: Install pip requirements
  pip:
    requirements: /opt/appdata/traktarr/requirements.txt
    executable: pip3

- name: Check if traktarr config exists
  stat:
    path: "/opt/appdata/traktarr/config.json"
  register: traktarr_config

- name: "Check if sonarr exists"
  stat:
    path: "/opt/appdata/sonarr/app/config.xml"
  register: sonarr_config
  when: not traktarr_config.stat.exists

- name: "When sonarr exists, add api key to traktar config"
  block:

  - name: Pull sonarr api key
    xml:
      path: "/opt/appdata/sonarr/app/config.xml"
      xpath: /Config/ApiKey
      content: text
    register: xmlresp

  - name: Set sonarr api Key
    set_fact:
      sonarr_api_key: "{{ xmlresp.matches[0].ApiKey }}"

  when: (not traktarr_config.stat.exists) and (sonarr_config.stat.exists)

- name: "Check if radarr exists"
  stat:
    path: "/opt/appdata/radarr/app/config.xml"
  register: radarr_config
  when: not traktarr_config.stat.exists

- name: "When radarr exists, add api key to traktar config"
  block:

  - name: Pull radarr api key
    xml:
      path: "/opt/appdata/radarr/app/config.xml"
      xpath: /Config/ApiKey
      content: text
    register: xmlresp

  - name: Set radarr api Key
    set_fact:
      radarr_api_key: "{{ xmlresp.matches[0].ApiKey }}"

  when: (not traktarr_config.stat.exists) and (radarr_config.stat.exists)

- name: Import default config
  template:
    src: config.json.j2
    dest: /opt/appdata/traktarr/config.json
    owner: '1000'
    group: '1000'
    mode: 0775
    force: yes
  when: not traktarr_config.stat.exists

- name: Set traktarr.py as executable
  file:
    path: /opt/appdata/traktarr/traktarr.py
    owner: '1000'
    group: '1000'
    mode: a+x

- name: Set directory permissions
  file: "path=/opt/appdata/traktarr state=directory owner={{ user.name }} group={{ user.name }} recurse=yes"

- name: "Create /usr/local/bin symlink"
  file:
    src: "/opt/appdata/traktarr/traktarr.py"
    dest: "/usr/local/bin/traktarr"
    state: link

- name: Import traktarr service
  template:
    src: traktarr.service.j2
    dest: /etc/systemd/system/traktarr.service
    force: yes
  when: not traktarr_service.stat.exists

- name: Load traktarr service
  systemd:
    name: traktarr
    state: "{{ traktarr_config.stat.exists | ternary('started','stopped') }}"
    enabled: "{{ traktarr_config.stat.exists | ternary('yes','no') }}"
    daemon_reload: yes
